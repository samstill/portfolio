var v=Object.defineProperty;var w=(n,e,t)=>e in n?v(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var l=(n,e,t)=>w(n,typeof e!="symbol"?e+"":e,t);import{t as E,i as u,w as i,U as s,v as g,x as y,h as d,V as D,_ as S,K as b,z as C,o as f}from"./index-DMA27xvW.js";class F{constructor(){l(this,"eventsCollection",E(u,"events"))}async getEvents(e,t){try{const o=[];if(e&&(e.startDate&&o.push(i("date",">=",e.startDate.toISOString())),e.endDate&&o.push(i("date","<=",e.endDate.toISOString())),e.minPrice!==void 0&&o.push(i("price",">=",e.minPrice)),e.maxPrice!==void 0&&o.push(i("price","<=",e.maxPrice))),t)switch(t){case"date-desc":o.push(s("date","desc"));break;case"date-asc":o.push(s("date","asc"));break;case"price-asc":o.push(s("price","asc"));break;case"price-desc":o.push(s("price","desc"));break}else o.push(s("date","desc"));const a=g(this.eventsCollection,...o);let c=(await y(a)).docs.map(r=>({id:r.id,...r.data()}));if(e!=null&&e.searchTerm){const r=e.searchTerm.toLowerCase();c=c.filter(p=>p.title.toLowerCase().includes(r)||p.description.toLowerCase().includes(r)||p.location.toLowerCase().includes(r))}return c}catch(o){throw console.error("Error fetching events:",o),new Error("Failed to fetch events")}}async getEvent(e){try{const t=d(this.eventsCollection,e),o=await D(t);return o.exists()?{id:o.id,...o.data()}:null}catch(t){throw console.error("Error fetching event:",t),new Error("Failed to fetch event")}}async createEvent(e){try{return{id:(await S(this.eventsCollection,{...e,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()})).id,...e}}catch(t){throw console.error("Error creating event:",t),new Error("Failed to create event")}}async updateEvent(e,t){try{const o=d(this.eventsCollection,e);await b(o,{...t,updatedAt:new Date().toISOString()});const a=await this.getEvent(e);if(!a)throw new Error("Event not found");return a}catch(o){throw console.error("Error updating event:",o),new Error("Failed to update event")}}async deleteEvent(e){try{const t=d(this.eventsCollection,e);await C(t)}catch(t){throw console.error("Error deleting event:",t),new Error("Failed to delete event")}}subscribeToAvailableTickets(e,t){const o=d(u,"events",e);return f(o,a=>{if(a.exists()){const h=a.data(),c=h.totalTickets||0,r=h.bookedTickets||0;t(c-r)}})}}export{F};
