rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user is part of a conversation
    function isConversationParticipant(conversationData) {
      return isAuthenticated() && (
        conversationData.participantIds.hasAny([request.auth.uid]) ||
        conversationData.createdBy == request.auth.uid ||
        isAdmin()
      );
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }

    // Conversations collection rules
    match /conversations/{conversationId} {
      // Allow listing conversations where user is a participant
      allow list: if isAuthenticated();
      
      // Allow reading specific conversation if user is a participant
      allow get: if isAuthenticated();

      // Allow creating new conversations
      allow create: if isAuthenticated() && (
        // Ensure the current user is included in participants
        request.resource.data.participants[request.auth.uid] == true &&
        // Ensure the current user is included in participantIds
        request.resource.data.participantIds.hasAny([request.auth.uid]) &&
        // Ensure there's at least one other participant
        request.resource.data.participantIds.size() >= 2 &&
        // Ensure createdBy matches the current user
        request.resource.data.createdBy == request.auth.uid
      );

      // Allow updating conversations user is part of
      allow update: if isAuthenticated();

      allow delete: if isAdmin();
    }

    // Messages collection rules
    match /messages/{messageId} {
      // Allow listing messages from conversations user is part of
      allow list: if isAuthenticated();
      
      // Allow reading specific message if user is part of the conversation
      allow get: if isAuthenticated();

      // Allow creating messages in conversations user is part of
      allow create: if isAuthenticated() && (
        // Ensure sender ID matches current user
        request.resource.data.senderId == request.auth.uid
      );

      // Allow updating own messages
      allow update: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        isAdmin()
      );

      allow delete: if isAdmin();
    }

    // User Settings collection rules
    match /userSettings/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Catch-all rule for other collections
    match /{collection}/{document=**} {
      allow read, write: if isAdmin();
    }
  }
} 