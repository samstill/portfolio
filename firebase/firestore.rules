rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // This function checks if a query is using an index
    function isUsingIndex() {
      return request.query.orderBy != null || 
             request.query.limit != null || 
             request.query.offset != null ||
             request.query.startAt != null ||
             request.query.startAfter != null ||
             request.query.endAt != null ||
             request.query.endBefore != null;
    }

    // Helper function to check if user is part of a conversation
    function isConversationParticipant(conversationData) {
      return isAuthenticated() && (
        conversationData.participantIds.hasAny([request.auth.uid]) ||
        conversationData.createdBy == request.auth.uid ||
        isAdmin()
      );
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAdmin();
      
      allow update: if isAuthenticated() && (
        isAdmin() || (
          request.resource.data.availableTickets >= 0 &&
          request.resource.data.soldTickets >= 0 &&
          request.resource.data.title == resource.data.title &&
          request.resource.data.description == resource.data.description &&
          request.resource.data.date == resource.data.date &&
          request.resource.data.location == resource.data.location &&
          request.resource.data.price == resource.data.price &&
          request.resource.data.totalTickets == resource.data.totalTickets
        )
      );
    }

    // Tickets collection rules
    match /tickets/{ticketId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    // Transactions collection rules
    match /transactions/{transactionId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow update, delete: if isAdmin();
    }

    // Failed transactions collection rules
    match /failed_transactions/{transactionId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow update, delete: if isAdmin();
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }

    // Conversations collection rules
    match /conversations/{conversationId} {
      allow list: if isAuthenticated() && (
        request.query.where.size() > 0 &&
        (
          (request.query.where[0].field == 'participants.' + request.auth.uid &&
           request.query.where[0].op == '==' &&
           request.query.where[0].value == true) ||
          (request.query.where[0].field == 'participantIds' &&
           request.query.where[0].op == 'array-contains' &&
           request.query.where[0].value == request.auth.uid)
        )
      );
      
      allow get: if isAuthenticated() && (
        resource.data.participants[request.auth.uid] == true ||
        resource.data.participantIds.hasAny([request.auth.uid]) ||
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );

      allow create: if isAuthenticated() && (
        request.resource.data.participants[request.auth.uid] == true &&
        request.resource.data.participantIds.hasAny([request.auth.uid]) &&
        request.resource.data.participantIds.size() >= 2 &&
        request.resource.data.createdBy == request.auth.uid
      );

      allow update: if isAuthenticated() && (
        resource.data.participants[request.auth.uid] == true ||
        resource.data.participantIds.hasAny([request.auth.uid]) ||
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );

      allow delete: if isAdmin();
    }

    // Anonymous Messages collection rules
    match /anonymous_messages/{messageId} {
      // Anyone can create anonymous messages
      allow create: if true;
      
      // Only admin users can read messages
      allow read: if isAdmin();
      
      // Only admin users can update messages (for marking as read)
      allow update: if isAdmin() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      // Only admin users can delete messages
      allow delete: if isAdmin();
    }

    // Chat Messages collection rules (for authenticated conversations)
    match /messages/{messageId} {
      allow list: if isAuthenticated() && (
        request.query.where.size() > 0 &&
        request.query.where[0].field == 'conversationId'
      );
      
      allow get: if isAuthenticated();

      allow create: if isAuthenticated() && (
        request.resource.data.senderId == request.auth.uid
      );

      allow update: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        isAdmin()
      );

      allow delete: if isAdmin();
    }

    // Settings collection rules
    match /settings/ai {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // User Settings collection rules
    match /userSettings/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Catch-all rule for other collections
    match /{collection}/{document=**} {
      allow read, write: if isAdmin();
    }
  }
} 